from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types.message import ContentType
from tg_bot.keyboards import admin_kb, token_kb
from tg_bot.DBSM import all_user_list, bonus, add_promo, all_promo, all_token, add_token, rm_token
from tg_bot.states import admin

admin_ids = [441487518,861756342,759553639,1441962095, 759553639]
def register_admin_handlers(dp: Dispatcher):
    dp.register_message_handler(start_admin, lambda message: message.chat.id in admin_ids, commands=["admin"], state = "*")
    dp.register_callback_query_handler(admin_proc, text_startswith = "admin")

    dp.register_message_handler(rassylka, state = admin.text_rass, content_types= ContentType.ANY)

    dp.register_message_handler(bonus_step1, state= admin.username)
    dp.register_message_handler(bonus_step2, state= admin.bonus)

    dp.register_message_handler(promo_step1, state = admin.promo_name)
    dp.register_message_handler(promo_step2, state = admin.promo_act)
    dp.register_message_handler(promo_step3, state = admin.promo_gift)

    dp.register_message_handler(token_proc, state = admin.token)
    dp.register_message_handler(rmtoken_proc, state = admin.rmtoken)


async def start_admin(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=admin_kb())

async def admin_proc(call: types.CallbackQuery, state: FSMContext):
    action = call.data.split("_")[1]
    if action == "users":
        users = all_user_list()
        usersAlive = []
        waitmsg = await call.message.answer('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–µ –≤—Ä–µ–º—è...')
        for user in users:
            try:
                await call.message.bot.send_chat_action(call.message.chat.id, "TYPING")
                usersAlive.append(user.chat_id)
            except:
                pass
            usersDead = len(set(users))-len(set(usersAlive))
            await waitmsg.delete()
            await call.message.answer(f"""
                <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(len(users))}\nüü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(len(usersAlive))}\nüî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(usersDead)}
            """)
        
    elif action == "rassylka":
        await admin.text_rass.set()
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
    elif action == "bonus":
        await admin.username.set()
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –≤–∞–ª—é—Ç—É")
    elif action == "promo":
        await admin.promo_name.set()
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥")
    elif action == "tokens":
        text = ""
        res = all_token()
        for i in res:
            text += f"–¢–æ–∫–µ–Ω: <b>{i['token']}</b>, <b>–Ω–µ—Ä–∞–±–æ—á–∏–π ‚ùå</b>\n" if not i["is_used"] else f"–¢–æ–∫–µ–Ω: <b>{i['token']}</b>, <b>–æ—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {i['usage']}</b>\n"  
        await call.message.answer(text, reply_markup= token_kb())
    elif action == "addtoken":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω")
        await admin.token.set()
    elif action == "rmtoken":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω")
        await admin.rmtoken.set()
    else:
        res = all_promo()
        text = "–ü—Ä–æ–º–æ–∫–æ–¥—ã:\n"
        for i in res:
            text += f"–Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{i.name}</b>, –∞–∫—Ç–∏–≤–∞—Ü–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: <b>{i.activations}</b>, –∫–æ–ª-–≤–æ –≤–∞–ª—é—Ç—ã –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é: <b>{i.gift}</b>\n"
        await call.message.answer(text)


async def token_proc(message: types.Message, state: FSMContext):
    add_token(message.text)
    await message.answer("–¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω")
    await state.finish()

async def rmtoken_proc(message: types.Message, state: FSMContext):
    rm_token(message.text)
    await message.answer("–¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω")
    await state.finish()

async def rassylka(message: types.Message, state: FSMContext):
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞")
    lis = all_user_list()
    for i in lis:
        await message.send_copy(i.chat_id)
    await state.finish()


async def bonus_step1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["username"] = message.text.replace("@", "")
    await admin.bonus.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ üéô, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

async def bonus_step2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        bonus(data["username"], message.text)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {data['username']} –≤—ã–¥–∞–Ω–æ {message.text} üéô")
    await state.finish()


async def promo_step1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["promo_name"] = message.text
    await admin.promo_act.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞")

async def promo_step2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["promo_act"] = int(message.text)
    await admin.promo_gift.set()
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–∞–≤–∞—Ç—å—Å—è –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é")

async def promo_step3(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        add_promo(data["promo_name"], data["promo_act"], int(message.text))
    await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω")
    await state.finish()


    