from aiogram import Dispatcher,types
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile
from tg_bot.keyboards import start_kb, subscribe_kb, tohome_kb, pers_kb
from tg_bot.DBSM import get_voices, minus_voice
from tg_bot.states import user
from tg_bot.neiro import OpenVoice
import os, string, random

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands=["start"], state = None)
    dp.register_message_handler(my_voice_step1, content_types=types.ContentType.VOICE, state = user.my_voice_voice)
    dp.register_message_handler(my_voice_step2, state = user.my_voice_text)

    dp.register_callback_query_handler(pers_choice, text_startswith = "curr")
    dp.register_callback_query_handler(check_sub, text="check_sub", state = None)
    dp.register_callback_query_handler(my_voice, text="my_voice", state = None)
    dp.register_callback_query_handler(pers, text="pers", state = None)
    dp.register_callback_query_handler(home, text="hone", state = "*")

async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("üéÅ –†–∞–∑—ã–≥—Ä–∞–π—Ç–µ –¥—Ä—É–∑–µ–π, –æ–∑–≤—É—á–∏–≤ —Ç–µ–∫—Å—Ç –ª—é–±—ã–º –≥–æ–ª–æ—Å–æ–º!\n\nüé§ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–∑–≤—É—á–∫–æ–π –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n–ë–∞–ª–∞–Ω—Å: 10 –í–æ–π—Å–æ–≤ üéô\n–£ –≤–∞—Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É üë®‚Äçüíª\n\n–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–π—Å—ã –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ üëâ @voicefusion", reply_markup= start_kb())

async def subscriber_check(msg: types.Message):
    data = await msg.bot.get_chat_member(chat_id="@fjhjfefhfjhefhk", user_id= msg.from_user.id)
    res = data["status"] != "left"
    if not res:
        await msg.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤ –±–æ—Ç–µ, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª @voicefusion", reply_markup= subscribe_kb())
        return False
    else:
        return True
    
async def home(call: types.CallbackQuery, state: FSMContext):
    if await state.get_state() != "user:my_voice_text":
        await state.finish()
    await call.message.edit_text("üéÅ –†–∞–∑—ã–≥—Ä–∞–π—Ç–µ –¥—Ä—É–∑–µ–π, –æ–∑–≤—É—á–∏–≤ —Ç–µ–∫—Å—Ç –ª—é–±—ã–º –≥–æ–ª–æ—Å–æ–º!\n\nüé§ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–∑–≤—É—á–∫–æ–π –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n–ë–∞–ª–∞–Ω—Å: 10 –í–æ–π—Å–æ–≤ üéô\n–£ –≤–∞—Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É üë®‚Äçüíª\n\n–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–π—Å—ã –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ üëâ @voicefusion", reply_markup= start_kb())

async def check_sub(call: types.CallbackQuery, state: FSMContext):
    data = await call.message.bot.get_chat_member(chat_id="@fjhjfefhfjhefhk", user_id= call.message.from_user.id)
    if data["status"] != "left":
        await call.message.edit_text("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å)", reply_markup=None)
        await call.message.answer("üéÅ –†–∞–∑—ã–≥—Ä–∞–π—Ç–µ –¥—Ä—É–∑–µ–π, –æ–∑–≤—É—á–∏–≤ —Ç–µ–∫—Å—Ç –ª—é–±—ã–º –≥–æ–ª–æ—Å–æ–º!\n\nüé§ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–∑–≤—É—á–∫–æ–π –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n–ë–∞–ª–∞–Ω—Å: 10 –í–æ–π—Å–æ–≤ üéô\n–£ –≤–∞—Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É üë®‚Äçüíª\n\n–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–π—Å—ã –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ üëâ @voicefusion", reply_markup= start_kb())
    else:
        await call.message.edit_text("–ï—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤ –±–æ—Ç–µ, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª @VoicerAi", reply_markup=subscribe_kb())



async def my_voice(call: types.CallbackQuery, state: FSMContext):
    voices = get_voices(call.message.chat.id)
    await call.message.edit_text(f"–ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç 5 —Å–µ–∫—É–Ω–¥ –¥–æ 3 –º–∏–Ω—É—Ç –∏ —è —Å–¥–µ–ª–∞—é —Ä–µ—á–µ–≤—É—é –º–æ–¥–µ–ª—å –Ω–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ üîâ\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {voices}üéô\n–û–¥–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –≥–æ–ª–æ—Å–æ–≤–æ–º—É: 6üéô", reply_markup=tohome_kb())
    await user.my_voice_voice.set()


async def my_voice_step1(message: types.Message, state: FSMContext):
    if get_voices(message.chat.id) < 6:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–π—Å–æ–≤(")
        await state.finish()
        return
    if message.voice.duration < 5 or message.voice.duration > 180:
        await message.answer("–ì–æ–ª–æ—Å–æ–≤–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 5 —Å–µ–∫—É–Ω–¥ –¥–æ 3 –º–∏–Ω—É—Ç")
        return
    
    def generate_random_string(length):
        chars = string.ascii_letters + string.digits
        return ''.join(random.choice(chars) for _ in range(length))
    
    if not os.path.isdir("tg_bot/voices"):
        os.mkdir("tg_bot/voices")

    name = generate_random_string(20) + ".wav"
    async with state.proxy() as data:
        data["name"] = name
    await message.voice.download(f"tg_bot/voices/{name}")
    await message.answer("–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏. –î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 –∏ –Ω–µ –±–æ–ª–µ–µ 300 —Å–∏–º–≤–æ–ª–æ–≤")
    await user.my_voice_text.set()
    minus_voice(message.chat.id, 6)

async def my_voice_step2(message: types.Message, state: FSMContext):
    if len(message.text) < 10 or len(message.text) > 300:
        await message.answer("–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 –∏ –Ω–µ –±–æ–ª–µ–µ 300 —Å–∏–º–≤–æ–ª–æ–≤!")
        return
    async with state.proxy() as data:
        res = OpenVoice(data["name"], message.text)
        await message.answer_voice(voice = InputFile(res))
        await state.finish()
    


async def pers(call: types.CallbackQuery, state: FSMContext):
    voices = get_voices(call.message.chat.id)
    await call.message.edit_text(f"–í—ã–±–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å –æ–∑–≤—É—á–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ ü•∑\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {voices}üéô\n–û–¥–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: 1üéô", reply_markup= pers_kb())

async def pers_choice(call: types.CallbackQuery, state: FSMContext):
    data = call.data.split("_")[1]
    async with state.proxy() as data:
        data["proxy"] = data

    


